pico-8 cartridge // http://www.pico-8.com
version 41
__lua__
dice={}
onefour24={1,4,6,6,6,6}
keptdice={0,0,0,0,0,0}
max_time=120
counter=max_time
update_interval = counter / 6  -- update every sixth of the time
current_dice_index = 1  -- variable to keep track of current dice being updated
delay_counter = 30  -- delay for 30 frames before updating the first dice
runcounter=false

hasone=false
hasfour=false
score=0

sel_index = -1

function _init()

	for i=1,6 do
		dice[i]=flr(rnd(6)+1)
	end

end

function _update()
	update()
end

function _draw()
	draw()
end
-->8
--update

function update()
 btnpress()
	
	if counter%update_interval==update_interval-1 and counter<max_time then
		sfx(0)
	end
	
	if counter > 0 then
	 if delay_counter > 0 then
	    delay_counter -= 1
	    for i = 1, 6 do
			if dice[i] > 0 then
    			dice[i] = flr(rnd(6) + 1)
			end
    	end    
	 else
	 
    local c = counter / update_interval
    local index = 6  -- start from the rightmost dice
    for i = 1, c do   
		if dice[index] > 0 then 
        	dice[index] = flr(rnd(6) + 1)
        	index = index - 1  -- move to the next dice from right to left
        	if index < 1 then            
        	    break  -- exit loop if all dice have been updated
        	end
		end
    end
    
    if runcounter then
     counter -= 1     
    end
	 end
	end

	if sel_index <0 and counter == 0 then
		sel_index=1
	end
	    
--	if counter!=60 then
	
--		local c=counter/10
	
--	 for i=c+1,6 do
--	  dice[i]=flr(rnd(6)+1)
--	 end
--	end
	
--	if counter!=60 then
--		counter+=1
--	end

end

function btnpress()
 	if btnp(❎) then
		counter=max_time
		runcounter=true
		delay_counter = 30		
		sel_index=-1
	end
	
	if sel_index > 0 then 
		if btnp(⬅️) then
			sel_index -= 1
			if sel_index < 1 then
				sel_index=6
			end
		elseif btnp(➡️) then
			sel_index += 1
			if sel_index > 6 then
				sel_index=1
			end
		elseif btnp(⬇️) then
			keptdice[sel_index] = dice[sel_index]
			dice[sel_index] = 0
		end
	end
	
end
-->8
--draw

function draw()
	cls()
	--bg
	rectfill(0,64,128,128, 1)

	drawdicelines()

	--dice
	for i=1,6 do
		if dice[i] > 0 then drawdice(dice[i], (17*i) - 2, 56) end
		if keptdice[i] then drawdice(keptdice[i], (17*i) - 2, 56 + 24) end
	end

	--cursor
	if sel_index > 0 then 
		drawcursor(sel_index)
	end	

	print("press x: stop/restart",7)

	-- debug
	print("delay: "..delay_counter,7)
	print("counter: "..counter,7)	
	print("sel_index: "..sel_index,7)	
	print("--dice | kept--")
	for i=1,6 do
		print(dice[i].."|"..tostr(keptdice[i]))
	end
	
-- 	for i=1,6 do
--  print(dice[i])
--  spr(dice[i], 24+i*9, 64)
-- 	end

end

function drawcursor(i)
	spr(10, 19 + ((i-1)*17), 76)
end

function drawdicelines()
	for i=1,6 do
		spr(25, (17*i)-2, 88, 2, 3)
	end
end

function drawdice(eyes, x, y)
	if eyes == 0 then return end
		
	--dice
	spr(7, x, y, 2, 3)
	--eyes
	local one={false, false, true, false, false}
	local two={true, false, false, false, true}
	local three={true, false, true, false, true}
	local four={true, true, false, true, true}
	local five={true, true, true, true, true}

	if eyes == 1 then draweyes(one, x, y)
	elseif eyes == 2 then draweyes(two, x, y)
	elseif eyes == 3 then draweyes(three, x, y)
	elseif eyes == 4 then draweyes(four, x, y)
	elseif eyes == 5 then draweyes(five, x, y)
	elseif eyes == 6 then
		spr(9, x + 2, y + 1)
		spr(9, x + 2, y + 6)
		spr(9, x + 2, y + 11)
		spr(9, x + 10, y + 1)
		spr(9, x + 10, y + 6)
		spr(9, x + 10, y + 11)
	end
end

function draweyes(arr, x, y)
	--TL
	if arr[1] then spr(9, x + 2, y + 2) end
	--TR
	if arr[2] then spr(9, x + 10, y + 2) end
	--C
	if arr[3] then spr(9, x + 6, y + 6) end
	--BL
	if arr[4] then spr(9, x + 2, y + 10) end
	--BR
	if arr[5] then spr(9, x + 10, y + 10) end
end


__gfx__
00000000077777700777777007777770077777700777777007777770067777777777776065560000000700000000000000000000000000000000000000000000
00000000777777777557777775577777755775577557755775577557677777777777777655550000007870000000000000000000000000000000000000000000
00700700777777777557777775577777755775577557755775577557777777777777777755550000078887000000000000000000000000000000000000000000
000770007775577777777777777dd77777777777777dd7777dd77dd7777777777777777765560000788888700000000000000000000000000000000000000000
000770007775577777777777777dd77777777777777dd7777dd77dd7777777777777777700000000788888700000000000000000000000000000000000000000
00700700777777777777755777777557755775577557755775577557777777777777777700000000722222700000000000000000000000000000000000000000
00000000777777777777755777777557755775577557755775577557777777777777777700000000722222700000000000000000000000000000000000000000
00000000077777700777777007777770077777700777777007777770777777777777777700000000777777700000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000777777777777777700222222222222000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000777777777777777702000000000000200000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000777777777777777720000000000000020000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000777777777777777720000000000000020000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000777777777777777720000000000000020000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000777777777777777720000000000000020000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000677777777777777620000000000000020000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000d67777777777776d20000000000000020000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000005dddddddddddddd520000000000000020000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000dddddddddddddddd20000000000000020000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000dddddddddddddddd20000000000000020000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000dddddddddddddddd20000000000000020000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000dddddddddddddddd20000000000000020000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000dddddddddddddddd20000000000000020000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000005dddddddddddddd502000000000000200000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000005dddddddddddd5000222222222222000000000000000000000000000000000000000000
__sfx__
000100000201004010080100c020120301b040130300d020070100101000010000000000000000000000000000000000000000000000000000000000000000000000000000000000100001000010000100001000
